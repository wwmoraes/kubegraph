// Code generated by Kubegraph; DO NOT EDIT.

package v1

import (
	"fmt"
	"reflect"

	"github.com/wwmoraes/kubegraph/internal/registry"
	coreV1 "k8s.io/api/core/v1"
)

// PersistentVolumeClaimObject alias for coreV1.PersistentVolumeClaim
type PersistentVolumeClaimObject = coreV1.PersistentVolumeClaim

// PersistentVolumeClaimAdapterObjectType reflected type of *coreV1.PersistentVolumeClaim
var PersistentVolumeClaimAdapterObjectType = reflect.TypeOf((*coreV1.PersistentVolumeClaim)(nil))

// GetPersistentVolumeClaimAdapter retrieves *PersistentVolumeClaimAdapter from the registry
func GetPersistentVolumeClaimAdapter() (*PersistentVolumeClaimAdapter, error) {
	adapter, err := registry.GetAdapter[*coreV1.PersistentVolumeClaim]()
	if err != nil {
		return nil, err
	}
	casted, ok := adapter.(*PersistentVolumeClaimAdapter)
	if !ok {
		return nil, fmt.Errorf("unable get adapter: %w", registry.ErrIncompatibleType)
	}
	return casted, nil
}

// PersistentVolumeClaimAdapter implements an adapter for coreV1.PersistentVolumeClaim
type PersistentVolumeClaimAdapter struct {
	registry.Adapter
}

// CastObject casts a runtime.Object to *coreV1.PersistentVolumeClaim
func (this *PersistentVolumeClaimAdapter) CastObject(obj registry.RuntimeObject) (*coreV1.PersistentVolumeClaim, error) {
	casted, ok := obj.(*coreV1.PersistentVolumeClaim)
	if !ok {
		return casted, fmt.Errorf("unable convert object: %w", registry.ErrIncompatibleType)
	}

	return casted, nil
}

// GetGraphObjects returns a map of all *coreV1.PersistentVolumeClaim
// nodes stored on a graph
func (this *PersistentVolumeClaimAdapter) GetGraphObjects(statefulGraph registry.StatefulGraph) (map[string]*coreV1.PersistentVolumeClaim, error) {
	objects, err := statefulGraph.GetObjects(PersistentVolumeClaimAdapterObjectType)
	if err != nil {
		return nil, err
	}

	castedObjects := make(map[string]*coreV1.PersistentVolumeClaim, len(objects))
	for key, object := range objects {
		casted, ok := object.(*coreV1.PersistentVolumeClaim)
		if !ok {
			return nil, fmt.Errorf("unable convert object: %w", registry.ErrIncompatibleType)
		}
		castedObjects[key] = casted
	}
	return castedObjects, nil
}

// GetGraphNode returns the node value representing a *coreV1.PersistentVolumeClaim
func (this *PersistentVolumeClaimAdapter) GetGraphNode(statefulGraph registry.StatefulGraph, name string) (registry.Node, error) {
	return statefulGraph.GetNode(PersistentVolumeClaimAdapterObjectType, name)
}

func (this *PersistentVolumeClaimAdapter) AddStyledNode(graph registry.StatefulGraph, obj registry.RuntimeObject) (registry.Node, error) {
	resource, err := this.CastObject(obj)
	if err != nil {
		return nil, err
	}

	name := fmt.Sprintf("%s.%s~%s", resource.APIVersion, resource.Kind, resource.Name)
	return graph.AddStyledNode(this.GetType(), obj, name, resource.Name, "icons/pvc.svg")
}

// init registers PersistentVolumeClaimAdapter
func init() {
	registry.MustRegister(&PersistentVolumeClaimAdapter{
		registry.NewAdapter(
			PersistentVolumeClaimAdapterObjectType,
			"icons/pvc.svg",
		),
	})
}
