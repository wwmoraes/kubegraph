// Code generated by Kubegraph; DO NOT EDIT.

package v1beta1

import (
	"fmt"
	"reflect"

	"github.com/wwmoraes/kubegraph/internal/registry"
	apiregistrationV1beta1 "k8s.io/kube-aggregator/pkg/apis/apiregistration/v1beta1"
)

// APIServiceObject alias for apiregistrationV1beta1.APIService
type APIServiceObject = apiregistrationV1beta1.APIService

// APIServiceAdapterObjectType reflected type of *apiregistrationV1beta1.APIService
var APIServiceAdapterObjectType = reflect.TypeOf((*apiregistrationV1beta1.APIService)(nil))

// GetAPIServiceAdapter retrieves *APIServiceAdapter from the registry
func GetAPIServiceAdapter() (*APIServiceAdapter, error) {
	adapter, err := registry.GetAdapter[*apiregistrationV1beta1.APIService]()
	if err != nil {
		return nil, err
	}
	casted, ok := adapter.(*APIServiceAdapter)
	if !ok {
		return nil, fmt.Errorf("unable get adapter: %w", registry.ErrIncompatibleType)
	}
	return casted, nil
}

// APIServiceAdapter implements an adapter for apiregistrationV1beta1.APIService
type APIServiceAdapter struct {
	registry.Adapter
}

// CastObject casts a runtime.Object to *apiregistrationV1beta1.APIService
func (this *APIServiceAdapter) CastObject(obj registry.RuntimeObject) (*apiregistrationV1beta1.APIService, error) {
	casted, ok := obj.(*apiregistrationV1beta1.APIService)
	if !ok {
		return casted, fmt.Errorf("unable convert object: %w", registry.ErrIncompatibleType)
	}

	return casted, nil
}

// GetGraphObjects returns a map of all *apiregistrationV1beta1.APIService
// nodes stored on a graph
func (this *APIServiceAdapter) GetGraphObjects(statefulGraph registry.StatefulGraph) (map[string]*apiregistrationV1beta1.APIService, error) {
	objects, err := statefulGraph.GetObjects(APIServiceAdapterObjectType)
	if err != nil {
		return nil, err
	}

	castedObjects := make(map[string]*apiregistrationV1beta1.APIService, len(objects))
	for key, object := range objects {
		casted, ok := object.(*apiregistrationV1beta1.APIService)
		if !ok {
			return nil, fmt.Errorf("unable convert object: %w", registry.ErrIncompatibleType)
		}
		castedObjects[key] = casted
	}
	return castedObjects, nil
}

// GetGraphNode returns the node value representing a *apiregistrationV1beta1.APIService
func (this *APIServiceAdapter) GetGraphNode(statefulGraph registry.StatefulGraph, name string) (registry.Node, error) {
	return statefulGraph.GetNode(APIServiceAdapterObjectType, name)
}

func (this *APIServiceAdapter) AddStyledNode(graph registry.StatefulGraph, obj registry.RuntimeObject) (registry.Node, error) {
	resource, err := this.CastObject(obj)
	if err != nil {
		return nil, err
	}

	name := fmt.Sprintf("%s.%s~%s", resource.APIVersion, resource.Kind, resource.Name)
	return graph.AddStyledNode(this.GetType(), obj, name, resource.Name, "icons/unknown.svg")
}

// init registers APIServiceAdapter
func init() {
	registry.MustRegister(&APIServiceAdapter{
		registry.NewAdapter(
			APIServiceAdapterObjectType,
			"icons/unknown.svg",
		),
	})
}
