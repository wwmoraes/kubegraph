// Code generated by Kubegraph; DO NOT EDIT.

package v2beta1

import (
	"fmt"
	"reflect"

	"github.com/wwmoraes/kubegraph/internal/registry"
	autoscalingV2beta1 "k8s.io/api/autoscaling/v2beta1"
)

// HorizontalPodAutoscalerObject alias for autoscalingV2beta1.HorizontalPodAutoscaler
type HorizontalPodAutoscalerObject = autoscalingV2beta1.HorizontalPodAutoscaler

// HorizontalPodAutoscalerAdapterObjectType reflected type of *autoscalingV2beta1.HorizontalPodAutoscaler
var HorizontalPodAutoscalerAdapterObjectType = reflect.TypeOf((*autoscalingV2beta1.HorizontalPodAutoscaler)(nil))

// GetHorizontalPodAutoscalerAdapter retrieves *HorizontalPodAutoscalerAdapter from the registry
func GetHorizontalPodAutoscalerAdapter() (*HorizontalPodAutoscalerAdapter, error) {
	adapter, err := registry.GetAdapter[*autoscalingV2beta1.HorizontalPodAutoscaler]()
	if err != nil {
		return nil, err
	}
	casted, ok := adapter.(*HorizontalPodAutoscalerAdapter)
	if !ok {
		return nil, fmt.Errorf("unable get adapter: %w", registry.ErrIncompatibleType)
	}
	return casted, nil
}

// HorizontalPodAutoscalerAdapter implements an adapter for autoscalingV2beta1.HorizontalPodAutoscaler
type HorizontalPodAutoscalerAdapter struct {
	registry.Adapter
}

// CastObject casts a runtime.Object to *autoscalingV2beta1.HorizontalPodAutoscaler
func (this *HorizontalPodAutoscalerAdapter) CastObject(obj registry.RuntimeObject) (*autoscalingV2beta1.HorizontalPodAutoscaler, error) {
	casted, ok := obj.(*autoscalingV2beta1.HorizontalPodAutoscaler)
	if !ok {
		return casted, fmt.Errorf("unable convert object: %w", registry.ErrIncompatibleType)
	}

	return casted, nil
}

// GetGraphObjects returns a map of all *autoscalingV2beta1.HorizontalPodAutoscaler
// nodes stored on a graph
func (this *HorizontalPodAutoscalerAdapter) GetGraphObjects(statefulGraph registry.StatefulGraph) (map[string]*autoscalingV2beta1.HorizontalPodAutoscaler, error) {
	objects, err := statefulGraph.GetObjects(HorizontalPodAutoscalerAdapterObjectType)
	if err != nil {
		return nil, err
	}

	castedObjects := make(map[string]*autoscalingV2beta1.HorizontalPodAutoscaler, len(objects))
	for key, object := range objects {
		casted, ok := object.(*autoscalingV2beta1.HorizontalPodAutoscaler)
		if !ok {
			return nil, fmt.Errorf("unable convert object: %w", registry.ErrIncompatibleType)
		}
		castedObjects[key] = casted
	}
	return castedObjects, nil
}

// GetGraphNode returns the node value representing a *autoscalingV2beta1.HorizontalPodAutoscaler
func (this *HorizontalPodAutoscalerAdapter) GetGraphNode(statefulGraph registry.StatefulGraph, name string) (registry.Node, error) {
	return statefulGraph.GetNode(HorizontalPodAutoscalerAdapterObjectType, name)
}

func (this *HorizontalPodAutoscalerAdapter) AddStyledNode(graph registry.StatefulGraph, obj registry.RuntimeObject) (registry.Node, error) {
	resource, err := this.CastObject(obj)
	if err != nil {
		return nil, err
	}

	name := fmt.Sprintf("%s.%s~%s", resource.APIVersion, resource.Kind, resource.Name)
	return graph.AddStyledNode(this.GetType(), obj, name, resource.Name, "icons/hpa.svg")
}

// init registers HorizontalPodAutoscalerAdapter
func init() {
	registry.MustRegister(&HorizontalPodAutoscalerAdapter{
		registry.NewAdapter(
			HorizontalPodAutoscalerAdapterObjectType,
			"icons/hpa.svg",
		),
	})
}
