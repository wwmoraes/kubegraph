// Code generated by Kubegraph; DO NOT EDIT.

package v1beta1

import (
	"fmt"
	"reflect"

	"github.com/wwmoraes/kubegraph/internal/registry"
	rbacV1beta1 "k8s.io/api/rbac/v1beta1"
)

// ClusterRoleBindingObject alias for rbacV1beta1.ClusterRoleBinding
type ClusterRoleBindingObject = rbacV1beta1.ClusterRoleBinding

// ClusterRoleBindingAdapterObjectType reflected type of *rbacV1beta1.ClusterRoleBinding
var ClusterRoleBindingAdapterObjectType = reflect.TypeOf((*rbacV1beta1.ClusterRoleBinding)(nil))

// GetClusterRoleBindingAdapter retrieves *ClusterRoleBindingAdapter from the registry
func GetClusterRoleBindingAdapter() (*ClusterRoleBindingAdapter, error) {
	adapter, err := registry.GetAdapter[*rbacV1beta1.ClusterRoleBinding]()
	if err != nil {
		return nil, err
	}
	casted, ok := adapter.(*ClusterRoleBindingAdapter)
	if !ok {
		return nil, fmt.Errorf("unable get adapter: %w", registry.ErrIncompatibleType)
	}
	return casted, nil
}

// ClusterRoleBindingAdapter implements an adapter for rbacV1beta1.ClusterRoleBinding
type ClusterRoleBindingAdapter struct {
	registry.Adapter
}

// CastObject casts a runtime.Object to *rbacV1beta1.ClusterRoleBinding
func (this *ClusterRoleBindingAdapter) CastObject(obj registry.RuntimeObject) (*rbacV1beta1.ClusterRoleBinding, error) {
	casted, ok := obj.(*rbacV1beta1.ClusterRoleBinding)
	if !ok {
		return casted, fmt.Errorf("unable convert object: %w", registry.ErrIncompatibleType)
	}

	return casted, nil
}

// GetGraphObjects returns a map of all *rbacV1beta1.ClusterRoleBinding
// nodes stored on a graph
func (this *ClusterRoleBindingAdapter) GetGraphObjects(statefulGraph registry.StatefulGraph) (map[string]*rbacV1beta1.ClusterRoleBinding, error) {
	objects, err := statefulGraph.GetObjects(ClusterRoleBindingAdapterObjectType)
	if err != nil {
		return nil, err
	}

	castedObjects := make(map[string]*rbacV1beta1.ClusterRoleBinding, len(objects))
	for key, object := range objects {
		casted, ok := object.(*rbacV1beta1.ClusterRoleBinding)
		if !ok {
			return nil, fmt.Errorf("unable convert object: %w", registry.ErrIncompatibleType)
		}
		castedObjects[key] = casted
	}
	return castedObjects, nil
}

// GetGraphNode returns the node value representing a *rbacV1beta1.ClusterRoleBinding
func (this *ClusterRoleBindingAdapter) GetGraphNode(statefulGraph registry.StatefulGraph, name string) (registry.Node, error) {
	return statefulGraph.GetNode(ClusterRoleBindingAdapterObjectType, name)
}

func (this *ClusterRoleBindingAdapter) AddStyledNode(graph registry.StatefulGraph, obj registry.RuntimeObject) (registry.Node, error) {
	resource, err := this.CastObject(obj)
	if err != nil {
		return nil, err
	}

	name := fmt.Sprintf("%s.%s~%s", resource.APIVersion, resource.Kind, resource.Name)
	return graph.AddStyledNode(this.GetType(), obj, name, resource.Name, "icons/crb.svg")
}

// init registers ClusterRoleBindingAdapter
func init() {
	registry.MustRegister(&ClusterRoleBindingAdapter{
		registry.NewAdapter(
			ClusterRoleBindingAdapterObjectType,
			"icons/crb.svg",
		),
	})
}
