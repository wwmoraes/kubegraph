// Code generated by Kubegraph; DO NOT EDIT.

package v1

import (
	"fmt"
	"reflect"

	"github.com/wwmoraes/kubegraph/internal/registry"
	rbacV1 "k8s.io/api/rbac/v1"
)

// RoleObject alias for rbacV1.Role
type RoleObject = rbacV1.Role

// RoleAdapterObjectType reflected type of *rbacV1.Role
var RoleAdapterObjectType = reflect.TypeOf((*rbacV1.Role)(nil))

// GetRoleAdapter retrieves *RoleAdapter from the registry
func GetRoleAdapter() (*RoleAdapter, error) {
	adapter, err := registry.GetAdapter[*rbacV1.Role]()
	if err != nil {
		return nil, err
	}
	casted, ok := adapter.(*RoleAdapter)
	if !ok {
		return nil, fmt.Errorf("unable get adapter: %w", registry.ErrIncompatibleType)
	}
	return casted, nil
}

// RoleAdapter implements an adapter for rbacV1.Role
type RoleAdapter struct {
	registry.Adapter
}

// CastObject casts a runtime.Object to *rbacV1.Role
func (this *RoleAdapter) CastObject(obj registry.RuntimeObject) (*rbacV1.Role, error) {
	casted, ok := obj.(*rbacV1.Role)
	if !ok {
		return casted, fmt.Errorf("unable convert object: %w", registry.ErrIncompatibleType)
	}

	return casted, nil
}

// GetGraphObjects returns a map of all *rbacV1.Role
// nodes stored on a graph
func (this *RoleAdapter) GetGraphObjects(statefulGraph registry.StatefulGraph) (map[string]*rbacV1.Role, error) {
	objects, err := statefulGraph.GetObjects(RoleAdapterObjectType)
	if err != nil {
		return nil, err
	}

	castedObjects := make(map[string]*rbacV1.Role, len(objects))
	for key, object := range objects {
		casted, ok := object.(*rbacV1.Role)
		if !ok {
			return nil, fmt.Errorf("unable convert object: %w", registry.ErrIncompatibleType)
		}
		castedObjects[key] = casted
	}
	return castedObjects, nil
}

// GetGraphNode returns the node value representing a *rbacV1.Role
func (this *RoleAdapter) GetGraphNode(statefulGraph registry.StatefulGraph, name string) (registry.Node, error) {
	return statefulGraph.GetNode(RoleAdapterObjectType, name)
}

func (this *RoleAdapter) AddStyledNode(graph registry.StatefulGraph, obj registry.RuntimeObject) (registry.Node, error) {
	resource, err := this.CastObject(obj)
	if err != nil {
		return nil, err
	}

	name := fmt.Sprintf("%s.%s~%s", resource.APIVersion, resource.Kind, resource.Name)
	return graph.AddStyledNode(this.GetType(), obj, name, resource.Name, "icons/role.svg")
}

// init registers RoleAdapter
func init() {
	registry.MustRegister(&RoleAdapter{
		registry.NewAdapter(
			RoleAdapterObjectType,
			"icons/role.svg",
		),
	})
}
