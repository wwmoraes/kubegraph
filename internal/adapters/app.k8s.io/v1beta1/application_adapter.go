// Code generated by Kubegraph; DO NOT EDIT.

package v1beta1

import (
	"fmt"
	"reflect"

	"github.com/wwmoraes/kubegraph/internal/registry"
	applicationV1beta1 "sigs.k8s.io/application/api/v1beta1"
)

// ApplicationObject alias for applicationV1beta1.Application
type ApplicationObject = applicationV1beta1.Application

// ApplicationAdapterObjectType reflected type of *applicationV1beta1.Application
var ApplicationAdapterObjectType = reflect.TypeOf((*applicationV1beta1.Application)(nil))

// GetApplicationAdapter retrieves *ApplicationAdapter from the registry
func GetApplicationAdapter() (*ApplicationAdapter, error) {
	adapter, err := registry.GetAdapter[*applicationV1beta1.Application]()
	if err != nil {
		return nil, err
	}
	casted, ok := adapter.(*ApplicationAdapter)
	if !ok {
		return nil, fmt.Errorf("unable get adapter: %w", registry.ErrIncompatibleType)
	}
	return casted, nil
}

// ApplicationAdapter implements an adapter for applicationV1beta1.Application
type ApplicationAdapter struct {
	registry.Adapter
}

// CastObject casts a runtime.Object to *applicationV1beta1.Application
func (this *ApplicationAdapter) CastObject(obj registry.RuntimeObject) (*applicationV1beta1.Application, error) {
	casted, ok := obj.(*applicationV1beta1.Application)
	if !ok {
		return casted, fmt.Errorf("unable convert object: %w", registry.ErrIncompatibleType)
	}

	return casted, nil
}

// GetGraphObjects returns a map of all *applicationV1beta1.Application
// nodes stored on a graph
func (this *ApplicationAdapter) GetGraphObjects(statefulGraph registry.StatefulGraph) (map[string]*applicationV1beta1.Application, error) {
	objects, err := statefulGraph.GetObjects(ApplicationAdapterObjectType)
	if err != nil {
		return nil, err
	}

	castedObjects := make(map[string]*applicationV1beta1.Application, len(objects))
	for key, object := range objects {
		casted, ok := object.(*applicationV1beta1.Application)
		if !ok {
			return nil, fmt.Errorf("unable convert object: %w", registry.ErrIncompatibleType)
		}
		castedObjects[key] = casted
	}
	return castedObjects, nil
}

// GetGraphNode returns the node value representing a *applicationV1beta1.Application
func (this *ApplicationAdapter) GetGraphNode(statefulGraph registry.StatefulGraph, name string) (registry.Node, error) {
	return statefulGraph.GetNode(ApplicationAdapterObjectType, name)
}

func (this *ApplicationAdapter) AddStyledNode(graph registry.StatefulGraph, obj registry.RuntimeObject) (registry.Node, error) {
	resource, err := this.CastObject(obj)
	if err != nil {
		return nil, err
	}

	name := fmt.Sprintf("%s.%s~%s", resource.APIVersion, resource.Kind, resource.Name)
	return graph.AddStyledNode(this.GetType(), obj, name, resource.Name, "icons/unknown.svg")
}

// init registers ApplicationAdapter
func init() {
	registry.MustRegister(&ApplicationAdapter{
		registry.NewAdapter(
			ApplicationAdapterObjectType,
			"icons/unknown.svg",
		),
	})
}
