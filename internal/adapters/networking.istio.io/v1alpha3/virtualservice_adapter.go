// Code generated by Kubegraph; DO NOT EDIT.

package v1alpha3

import (
	"fmt"
	"reflect"

	"github.com/wwmoraes/kubegraph/internal/registry"
	networkV1alpha3 "istio.io/client-go/pkg/apis/networking/v1alpha3"
)

// VirtualServiceObject alias for networkV1alpha3.VirtualService
type VirtualServiceObject = networkV1alpha3.VirtualService

// VirtualServiceAdapterObjectType reflected type of *networkV1alpha3.VirtualService
var VirtualServiceAdapterObjectType = reflect.TypeOf((*networkV1alpha3.VirtualService)(nil))

// GetVirtualServiceAdapter retrieves *VirtualServiceAdapter from the registry
func GetVirtualServiceAdapter() (*VirtualServiceAdapter, error) {
	adapter, err := registry.GetAdapter[*networkV1alpha3.VirtualService]()
	if err != nil {
		return nil, err
	}
	casted, ok := adapter.(*VirtualServiceAdapter)
	if !ok {
		return nil, fmt.Errorf("unable get adapter: %w", registry.ErrIncompatibleType)
	}
	return casted, nil
}

// VirtualServiceAdapter implements an adapter for networkV1alpha3.VirtualService
type VirtualServiceAdapter struct {
	registry.Adapter
}

// CastObject casts a runtime.Object to *networkV1alpha3.VirtualService
func (this *VirtualServiceAdapter) CastObject(obj registry.RuntimeObject) (*networkV1alpha3.VirtualService, error) {
	casted, ok := obj.(*networkV1alpha3.VirtualService)
	if !ok {
		return casted, fmt.Errorf("unable convert object: %w", registry.ErrIncompatibleType)
	}

	return casted, nil
}

// GetGraphObjects returns a map of all *networkV1alpha3.VirtualService
// nodes stored on a graph
func (this *VirtualServiceAdapter) GetGraphObjects(statefulGraph registry.StatefulGraph) (map[string]*networkV1alpha3.VirtualService, error) {
	objects, err := statefulGraph.GetObjects(VirtualServiceAdapterObjectType)
	if err != nil {
		return nil, err
	}

	castedObjects := make(map[string]*networkV1alpha3.VirtualService, len(objects))
	for key, object := range objects {
		casted, ok := object.(*networkV1alpha3.VirtualService)
		if !ok {
			return nil, fmt.Errorf("unable convert object: %w", registry.ErrIncompatibleType)
		}
		castedObjects[key] = casted
	}
	return castedObjects, nil
}

// GetGraphNode returns the node value representing a *networkV1alpha3.VirtualService
func (this *VirtualServiceAdapter) GetGraphNode(statefulGraph registry.StatefulGraph, name string) (registry.Node, error) {
	return statefulGraph.GetNode(VirtualServiceAdapterObjectType, name)
}

func (this *VirtualServiceAdapter) AddStyledNode(graph registry.StatefulGraph, obj registry.RuntimeObject) (registry.Node, error) {
	resource, err := this.CastObject(obj)
	if err != nil {
		return nil, err
	}

	name := fmt.Sprintf("%s.%s~%s", resource.APIVersion, resource.Kind, resource.Name)
	return graph.AddStyledNode(this.GetType(), obj, name, resource.Name, "icons/unknown.svg")
}

// init registers VirtualServiceAdapter
func init() {
	registry.MustRegister(&VirtualServiceAdapter{
		registry.NewAdapter(
			VirtualServiceAdapterObjectType,
			"icons/unknown.svg",
		),
	})
}
