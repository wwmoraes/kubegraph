// Code generated by Kubegraph; DO NOT EDIT.

package {{.PackageName}}

import (
	"fmt"
	"reflect"

	"github.com/wwmoraes/kubegraph/internal/registry"
	{{.ImportName}} "{{.ImportURL}}"
)

// {{.TypeName}}Object alias for {{.ImportName}}.{{.TypeName}}
type {{.TypeName}}Object = {{.ImportName}}.{{.TypeName}}

// {{.TypeName}}AdapterObjectType reflected type of *{{.ImportName}}.{{.TypeName}}
var {{.TypeName}}AdapterObjectType = reflect.TypeOf((*{{.ImportName}}.{{.TypeName}})(nil))

// Get{{.TypeName}}Adapter retrieves *{{.TypeName}}Adapter from the registry
func Get{{.TypeName}}Adapter() (*{{.TypeName}}Adapter, error) {
	adapter, err := registry.GetAdapter[*{{.ImportName}}.{{.TypeName}}]()
	if err != nil {
		return nil, err
	}
	casted, ok := adapter.(*{{.TypeName}}Adapter)
	if !ok {
		return nil, fmt.Errorf("unable get adapter: %w", registry.ErrIncompatibleType)
	}
	return casted, nil
}

// {{.TypeName}}Adapter implements an adapter for {{.ImportName}}.{{.TypeName}}
type {{.TypeName}}Adapter struct {
	registry.Adapter
}

// CastObject casts a runtime.Object to *{{.ImportName}}.{{.TypeName}}
func (this *{{.TypeName}}Adapter) CastObject(obj registry.RuntimeObject) (*{{.ImportName}}.{{.TypeName}}, error) {
	casted, ok := obj.(*{{.ImportName}}.{{.TypeName}})
	if !ok {
		return casted, fmt.Errorf("unable convert object: %w", registry.ErrIncompatibleType)
	}

	return casted, nil
}

// GetGraphObjects returns a map of all *{{.ImportName}}.{{.TypeName}}
// nodes stored on a graph
func (this *{{.TypeName}}Adapter) GetGraphObjects(statefulGraph registry.StatefulGraph) (map[string]*{{.ImportName}}.{{.TypeName}}, error) {
	objects, err := statefulGraph.GetObjects({{.TypeName}}AdapterObjectType)
	if err != nil {
		return nil, err
	}

	castedObjects := make(map[string]*{{.ImportName}}.{{.TypeName}}, len(objects))
	for key, object := range objects {
		casted, ok := object.(*{{.ImportName}}.{{.TypeName}})
		if !ok {
			return nil, fmt.Errorf("unable convert object: %w", registry.ErrIncompatibleType)
		}
		castedObjects[key] = casted
	}
	return castedObjects, nil
}

// GetGraphNode returns the node value representing a *{{.ImportName}}.{{.TypeName}}
func (this *{{.TypeName}}Adapter) GetGraphNode(statefulGraph registry.StatefulGraph, name string) (registry.Node, error) {
	return statefulGraph.GetNode({{.TypeName}}AdapterObjectType, name)
}

func (this *{{.TypeName}}Adapter) AddStyledNode(graph registry.StatefulGraph, obj registry.RuntimeObject) (registry.Node, error) {
	resource, err := this.CastObject(obj)
	if err != nil {
		return nil, err
	}

	name := fmt.Sprintf("%s.%s~%s", resource.APIVersion, resource.Kind, resource.Name)
	return graph.AddStyledNode(this.GetType(), obj, name, resource.Name, "{{.IconPath}}")
}

// init registers {{.TypeName}}Adapter
func init() {
	registry.MustRegister(&{{.TypeName}}Adapter{
		registry.NewAdapter(
			{{.TypeName}}AdapterObjectType,
			"{{.IconPath}}",
		),
	})
}
